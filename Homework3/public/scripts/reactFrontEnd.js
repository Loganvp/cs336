/*
*   @author: Logan VanProyen
*   @version: Fall 2016, CS336
*
*   All I basically did was rename almost all of the things from Lab08.
*   Anything that was 'Comment' I just replace with 'Person' or 'People'
*/


//creates the html for the screen
var Person = React.createClass({
  render: function() {
    return (
      <div className="people">
      <h2 className="persons">
      Identity #:{this.props.id} Full name:{this.props.firstName} {this.props.lastName} Hire date:{this.props.hireDate}
      </h2>
      </div>
    );
  }
});


var PeopleMain = React.createClass({
  loadPersonsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(people) {
        this.setState({people: people});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handlePeopleSubmit: function(person) {
    var people = this.state.people;   //var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    person.id = Date.now();
    var newPeople= people.concat([person]);
    this.setState({people: newPeople});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: person,
      success: function(people) {
        this.setState({people: people});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({people: person});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {people: []};
  },
  componentDidMount: function() {
    this.loadPersonsFromServer();
    setInterval(this.loadPersonsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="peopleMain">
      <h1>People</h1>
      <PeopleList people={this.state.people} />
      <PeopleForm onPeopleSubmit={this.handlePeopleSubmit} />
      </div>
    );
  }
});

var peopleList = React.createClass({
  render: function() {
    var personNodes = this.props.people.map(function(person) {
      return (
        <Person id = {person.id} firstName = {person.firstName} lastName = {person.lastName} hireDate = {person.hireDate} key= {person.id}>
        </Person>
      );
    });
    return (
      <div className="peopleList">
      {personNodes}
      </div>
    );
  }
});

var Form = React.createClass({
  getInitialState: function() {
    return {id: '', firstName: '', lastName: '', hireDate: ''};
  },
  handleIdChange: function(e) {
    this.setState({id: e.target.value});
  },
  handleFirstNameChange: function(e) {
    this.setState({firstName: e.target.value});
  },
  handleLastNameChange: function(e) {
    this.setState({lastName: e.target.value});
  },
  handleHireDateChange: function(e) {
    this.setState({hireDate: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var id = this.state.id.trim();
    var firstName = this.state.firstName.trim();
    var lastName = this.state.lastName.trim();
    var hireDate = this.state.hireDate.trim();
    if (!id || !firstName || !lastName || !hireDate) {
      return;
    }
    this.props.onPeopleSubmit({id: id, firstName: firstName, lastName: lastName, hireDate: hireDate});
    this.setState({id: '', firstName: '', lastName: '', hireDate: ''});
  },
  render: function() {
    return (
      <form className="Form" onSubmit={this.handleSubmit}>
      <input
      type="integer"
      placeholder="Identity #"
      value={this.state.id}
      onChange={this.handleIdChange}
      />
      <input
      type="text"
      placeholder="First name"
      value={this.state.firstName}
      onChange={this.handleFirstNameChange}
      />
      <input
      type="text"
      placeholder="Last name"
      value={this.state.lastName}
      onChange={this.handleLastNameChange}
      />
      <input
      type="date"
      placeholder="Hire Date"
      value={this.state.hireDate}
      onChange={this.handleHireDateChange}
      />
      <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <PeopleMain url="/api/people" pollInterval={2000} />,
  document.getElementById('content')
);
